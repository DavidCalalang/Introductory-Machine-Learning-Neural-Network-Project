{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "be02a957-7133-4d02-818e-fedeb3cecb05",
   "metadata": {},
   "source": [
    "# Project 10 -- David Martin Calalang"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1228853-dd19-4ab2-89e0-0394d7d72de3",
   "metadata": {},
   "source": [
    "*Consulted videos on The Examples Book"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6180e742-8e39-4698-98ff-5b00c8cf8ea0",
   "metadata": {},
   "source": [
    "## Question 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8bc826ea-d997-4add-bb81-adea2215d4e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "58431bdf-3ac4-4553-b277-c1f4caad3037",
   "metadata": {},
   "outputs": [],
   "source": [
    "mycols = [\n",
    "    'DepDelay', 'ArrDelay', 'Distance',\n",
    "    'CarrierDelay', 'WeatherDelay',\n",
    "    'DepTime', 'ArrTime', 'Diverted', 'AirTime'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "133e91f8-2767-4882-8caf-840bd9bc74ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Part A\n",
    "mycoltypes = {\n",
    "    'DepDelay': 'float64',\n",
    "    'ArrDelay': 'float64',\n",
    "    'Distance': 'float64',\n",
    "    'CarrierDelay': 'float64',\n",
    "    'WeatherDelay': 'float64',\n",
    "    'DepTime': 'float64',\n",
    "    'ArrTime': 'Int64',\n",
    "    'Diverted': 'float64',\n",
    "    'AirTime': 'float64'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c2a911b4-0d14-45ae-ac52-230a4542eb14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DepTime</th>\n",
       "      <th>DepDelay</th>\n",
       "      <th>ArrTime</th>\n",
       "      <th>ArrDelay</th>\n",
       "      <th>Diverted</th>\n",
       "      <th>AirTime</th>\n",
       "      <th>Distance</th>\n",
       "      <th>CarrierDelay</th>\n",
       "      <th>WeatherDelay</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>935.0</td>\n",
       "      <td>-5.0</td>\n",
       "      <td>1051</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>951.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1115</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1144.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1302</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1134.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1253</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1129.0</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>1244</td>\n",
       "      <td>-16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   DepTime  DepDelay  ArrTime  ArrDelay  Diverted  AirTime  Distance  \\\n",
       "0    935.0      -5.0     1051      -4.0       0.0     56.0     328.0   \n",
       "1    951.0      11.0     1115      20.0       0.0     54.0     328.0   \n",
       "2   1144.0       9.0     1302       2.0       0.0     57.0     328.0   \n",
       "3   1134.0      -1.0     1253      -7.0       0.0     53.0     328.0   \n",
       "4   1129.0      -6.0     1244     -16.0       0.0     52.0     328.0   \n",
       "\n",
       "   CarrierDelay  WeatherDelay  \n",
       "0           NaN           NaN  \n",
       "1          11.0           0.0  \n",
       "2           NaN           NaN  \n",
       "3           NaN           NaN  \n",
       "4           NaN           NaN  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a2bfabd2-2896-4e51-aef5-be3b7fc1a957",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Part B\n",
    "df = pd.read_csv(\"/anvil/projects/tdm/data/flights/2014.csv\", nrows=10000, usecols=mycols, dtype=mycoltypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "80b2bc58-999c-46aa-990f-5395ea7a69e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 9)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc601975-35ed-4680-a4e1-0273ee3cc047",
   "metadata": {},
   "source": [
    "## Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "90c84af4-539e-4ead-8bf1-a9d1272225f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-03-26 19:12:15.268512: E tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:9342] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-03-26 19:12:15.269119: E tensorflow/compiler/xla/stream_executor/cuda/cuda_fft.cc:609] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-03-26 19:12:15.272986: E tensorflow/compiler/xla/stream_executor/cuda/cuda_blas.cc:1518] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "2024-03-26 19:12:15.631202: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "# Part A\n",
    "import tensorflow as tf\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "38b67333-5302-48e6-87ed-11b3d46d88b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Part B\n",
    "for col in df.columns:\n",
    "    df[col] = df[col].fillna(df[col].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "855207a8-a850-42e9-8f7d-360b1605e517",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DepTime</th>\n",
       "      <th>DepDelay</th>\n",
       "      <th>ArrTime</th>\n",
       "      <th>ArrDelay</th>\n",
       "      <th>Diverted</th>\n",
       "      <th>AirTime</th>\n",
       "      <th>Distance</th>\n",
       "      <th>CarrierDelay</th>\n",
       "      <th>WeatherDelay</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>935.0</td>\n",
       "      <td>-5.0</td>\n",
       "      <td>1051</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>951.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1115</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1144.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1302</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1134.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>1253</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1129.0</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>1244</td>\n",
       "      <td>-16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>328.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   DepTime  DepDelay  ArrTime  ArrDelay  Diverted  AirTime  Distance  \\\n",
       "0    935.0      -5.0     1051      -4.0       0.0     56.0     328.0   \n",
       "1    951.0      11.0     1115      20.0       0.0     54.0     328.0   \n",
       "2   1144.0       9.0     1302       2.0       0.0     57.0     328.0   \n",
       "3   1134.0      -1.0     1253      -7.0       0.0     53.0     328.0   \n",
       "4   1129.0      -6.0     1244     -16.0       0.0     52.0     328.0   \n",
       "\n",
       "   CarrierDelay  WeatherDelay  \n",
       "0           0.0           0.0  \n",
       "1          11.0           0.0  \n",
       "2           0.0           0.0  \n",
       "3           0.0           0.0  \n",
       "4           0.0           0.0  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e586edd-ff26-4ce2-8f6b-2424b26f2929",
   "metadata": {},
   "source": [
    "## Question 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "b1e4f2a2-f78e-4b75-a323-57d98f78f08c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting features and labels\n",
    "features = df.drop('ArrDelay', axis=1)\n",
    "labels = df['ArrDelay']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5a198952-97a2-4335-b3b7-c6af2f815e9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c01bf9b-f5d8-4404-b8b0-e94d9b1d102f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Part A\n",
    "# Features serve as the variables we are taking into account when we are making a prediction, while labels represent the actual expected outcome."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f3eb965-f169-43c4-99c3-7a3380172468",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Part B\n",
    "# Having a training and test split allows for us to use some part of our data in training our model, and by taking the outputs of that training, we can validate our model predictions using the testing data.\n",
    "# In this case we use a large (80%) of our data in training our model, with the rest being used to validate our data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da22f29c-d245-4d2b-9fc1-ca14cb6087d9",
   "metadata": {},
   "source": [
    "## Question 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "49c671fa-735a-4d18-ac09-386477cffe2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Part A\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train).astype(np.float32)\n",
    "X_test_scaled = scaler.transform(X_test).astype(np.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "f470178c-411e-4d99-ba93-fa6e418f8bd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Part B\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((X_train_scaled, y_train)).batch(14)\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((X_test_scaled, y_test)).batch(14)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88c9cdac-3e92-498f-83fa-e089bfc44ac8",
   "metadata": {},
   "source": [
    "## Question 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "b43502ad-2be6-410f-8184-75fd2c5e718c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "572/572 [==============================] - 1s 1ms/step - loss: 3153.0994 - mean_absolute_error: 24.2215 - val_loss: 1659.2117 - val_mean_absolute_error: 17.7818\n",
      "Epoch 2/10\n",
      "572/572 [==============================] - 1s 877us/step - loss: 1046.5264 - mean_absolute_error: 15.1333 - val_loss: 367.3477 - val_mean_absolute_error: 10.7023\n",
      "Epoch 3/10\n",
      "572/572 [==============================] - 1s 913us/step - loss: 399.2041 - mean_absolute_error: 11.3993 - val_loss: 287.6319 - val_mean_absolute_error: 10.1206\n",
      "Epoch 4/10\n",
      "572/572 [==============================] - 1s 935us/step - loss: 342.3668 - mean_absolute_error: 11.0281 - val_loss: 272.4266 - val_mean_absolute_error: 10.0356\n",
      "Epoch 5/10\n",
      "572/572 [==============================] - 1s 912us/step - loss: 326.2086 - mean_absolute_error: 10.8935 - val_loss: 257.6650 - val_mean_absolute_error: 9.8056\n",
      "Epoch 6/10\n",
      "572/572 [==============================] - 1s 886us/step - loss: 298.9624 - mean_absolute_error: 10.5289 - val_loss: 248.3939 - val_mean_absolute_error: 9.7766\n",
      "Epoch 7/10\n",
      "572/572 [==============================] - 1s 896us/step - loss: 284.5760 - mean_absolute_error: 10.4179 - val_loss: 242.5092 - val_mean_absolute_error: 9.5870\n",
      "Epoch 8/10\n",
      "572/572 [==============================] - 1s 891us/step - loss: 273.1530 - mean_absolute_error: 10.2525 - val_loss: 239.1336 - val_mean_absolute_error: 9.4560\n",
      "Epoch 9/10\n",
      "572/572 [==============================] - 1s 949us/step - loss: 261.7367 - mean_absolute_error: 10.1109 - val_loss: 233.4333 - val_mean_absolute_error: 9.4240\n",
      "Epoch 10/10\n",
      "572/572 [==============================] - 1s 947us/step - loss: 273.5795 - mean_absolute_error: 10.0942 - val_loss: 230.3904 - val_mean_absolute_error: 9.4387\n"
     ]
    }
   ],
   "source": [
    "# Define model\n",
    "model = tf.keras.Sequential([\n",
    "    tf.keras.layers.Dense(128, activation='relu', input_shape=(X_train_scaled.shape[1],)),\n",
    "    tf.keras.layers.Dropout(0.2),\n",
    "    tf.keras.layers.Dense(1)\n",
    "])\n",
    "\n",
    "# Compile\n",
    "model.compile(optimizer='adam',\n",
    "              loss='mean_squared_error',\n",
    "              metrics=['mean_absolute_error'])\n",
    "\n",
    "# Train\n",
    "history = model.fit(train_dataset, epochs=10, validation_data=test_dataset)\n",
    "\n",
    "# Cleanup\n",
    "del X_train_scaled, X_test_scaled, train_dataset, test_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1e3b3d2-ae70-4973-80f1-1b93f6021a61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This neural network model analyzes our dataset (using the training data) in order to identify patterns, creating various layers by parsing through our data iteratively (10 times, 10 epochs). With this, the model\n",
    "# will create predictions based on what its learned in the patterns its collected."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f76442d6-d02e-4f26-b9d6-c3183e1d6929",
   "metadata": {},
   "source": [
    "## Pledge\n",
    "\n",
    "By submitting this work I hereby pledge that this is my own, personal work. I've acknowledged in the designated place at the top of this file all sources that I used to complete said work, including but not limited to: online resources, books, and electronic communications. I've noted all collaboration with fellow students and/or TA's. I did not copy or plagiarize another's work.\n",
    "\n",
    "> As a Boilermaker pursuing academic excellence, I pledge to be honest and true in all that I do. Accountable together – We are Purdue."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "seminar",
   "language": "python",
   "name": "seminar"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
